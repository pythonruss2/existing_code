# Reference this view as source_eav
sql: |
  SELECT
       all_customer_data.company_id AS COMPANY_ID
      ,all_customer_data.value as VALUE
      ,all_customer_data.datatype as DATATYPE
      ,all_customer_data.field_name as FIELD_NAME
      ,all_customer_data.resource_id as RESOURCE_ID
      ,all_customer_data.user_id as USER_ID
      ,all_customer_data.employee_id as EMPLOYEE_ID
  FROM
      /* Simulated Data representing proposed EAV structure */
      (
        /* highly privledged user 1 at company 100, can see all fields for all 3 employees */
        SELECT 1 as user_id, 1000 as company_id, 100 as employee_id, 1 as resource_id, 'name' as field_name, 'varchar' as datatype, 'William Shakespeare' as value UNION ALL
        SELECT 1, 1000, 100, 2, 'job', 'varchar', 'CEO' UNION ALL
        SELECT 1, 1000, 100, 3, 'pay', 'int', '400000' UNION ALL
        SELECT 1, 1000, 100, 4, 'start_date', 'datetime', '2020-01-01' UNION ALL
        
        SELECT 1, 1000, 101, 1, 'name', 'varchar', 'George Orwell' UNION ALL
        SELECT 1, 1000, 101, 2, 'job', 'varchar', 'CTO' UNION ALL
        SELECT 1, 1000, 101, 3, 'pay', 'int', '250000' UNION ALL
        SELECT 1, 1000, 101, 4, 'start_date', 'datetime', '2021-01-01' UNION ALL
        
        SELECT 1, 1000, 102, 1, 'name', 'varchar', 'Fyodor Dostoevsky' UNION ALL
        SELECT 1, 1000, 102, 2, 'job', 'varchar', 'CFO' UNION ALL
        SELECT 1, 1000, 102, 3, 'pay', 'int', '275000' UNION ALL
        SELECT 1, 1000, 102, 4, 'start_date', 'datetime', '2020-06-01' UNION ALL
        /* lower privledged user 2 at company 100, can see some fields for 3 employees */
        SELECT 2, 1000, 100, 1, 'name', 'varchar', 'William Shakespeare' UNION ALL
        SELECT 2, 1000, 100, 2, 'job', 'varchar', 'CEO' UNION ALL
        SELECT 2, 1000, 100, 4, 'start_date', 'datetime', '2020-01-01' UNION ALL
        
        SELECT 2, 1000, 101, 1, 'name', 'varchar', 'George Orwell' UNION ALL
        SELECT 2, 1000, 101, 2, 'job', 'varchar', 'CTO' UNION ALL
        SELECT 2, 1000, 101, 4, 'start_date', 'datetime', '2021-01-01' UNION ALL
        
        SELECT 2, 1000, 102, 1, 'name', 'varchar', 'Fyodor Dostoevsky' UNION ALL
        SELECT 2, 1000, 102, 2, 'job', 'varchar', 'CFO' UNION ALL
        SELECT 2, 1000, 102, 4, 'start_date', 'datetime', '2020-06-01' UNION ALL
        /* lowest privledged user 3 at company 100, can see basic fields for 2 of 3 employees, 
          but pay for only emp 102 */
        SELECT 3, 1000, 101, 1, 'name', 'varchar', 'George Orwell' UNION ALL
        SELECT 3, 1000, 101, 2, 'job', 'varchar', 'CTO' UNION ALL
        
        SELECT 3, 1000, 102, 1, 'name', 'varchar', 'Fyodor Dostoevsky' UNION ALL
        SELECT 3, 1000, 102, 2, 'job', 'varchar', 'CFO' UNION ALL
        SELECT 3, 1000, 102, 3, 'pay', 'int', '275000' UNION ALL
        
        SELECT 4, 2000, 200, 1, 'name', 'varchar', 'Emily Dickinson' UNION ALL
        SELECT 4, 2000, 200, 2, 'job', 'varchar', 'CEO' UNION ALL
        SELECT 4, 2000, 200, 3, 'pay', 'int', '1000000' UNION ALL
        SELECT 4, 2000, 200, 4, 'start_date', 'datetime', '2017-09-25' UNION ALL
        
        SELECT 4, 2000, 201, 1, 'name', 'varchar', 'Mark Twain' UNION ALL
        SELECT 4, 2000, 201, 2, 'job', 'varchar', 'Custodian' UNION ALL
        SELECT 4, 2000, 201, 3, 'pay', 'int', '40000' UNION ALL
        SELECT 4, 2000, 201, 4, 'start_date', 'datetime', '2010-12-25' UNION ALL
        
        SELECT 4, 2000, 202, 1, 'name', 'varchar', 'Franz Kafka' UNION ALL
        SELECT 4, 2000, 202, 2, 'job', 'varchar', 'CMO' UNION ALL
        SELECT 4, 2000, 202, 3, 'pay', 'int', '300000' UNION ALL
        SELECT 4, 2000, 202, 4, 'start_date', 'datetime', '2014-10-06' UNION ALL
        
        SELECT 4, 2000, 203, 1, 'name', 'varchar', 'Leo Tolstoy' UNION ALL
        SELECT 4, 2000, 203, 2, 'job', 'varchar', 'Engineering Team Lead' UNION ALL
        SELECT 4, 2000, 203, 3, 'pay', 'int', '130000' UNION ALL
        SELECT 4, 2000, 203, 4, 'start_date', 'datetime', '2018-03-10' UNION ALL
        
        SELECT 5, 2000, 200, 1, 'name', 'varchar', 'Emily Dickinson' UNION ALL
        SELECT 5, 2000, 200, 2, 'job', 'varchar', 'CEO' UNION ALL
        SELECT 5, 2000, 200, 4, 'start_date', 'datetime', '2017-09-25' UNION ALL
        
        SELECT 5, 2000, 201, 1, 'name', 'varchar', 'Mark Twain' UNION ALL
        SELECT 5, 2000, 201, 2, 'job', 'varchar', 'Custodian' UNION ALL
        SELECT 5, 2000, 201, 4, 'start_date', 'datetime', '2010-12-25' UNION ALL
        
        SELECT 5, 2000, 202, 1, 'name', 'varchar', 'Franz Kafka' UNION ALL
        SELECT 5, 2000, 202, 2, 'job', 'varchar', 'CMO' UNION ALL
        SELECT 5, 2000, 202, 4, 'start_date', 'datetime', '2014-10-06' UNION ALL
        
        SELECT 5, 2000, 203, 1, 'name', 'varchar', 'Leo Tolstoy' UNION ALL
        SELECT 5, 2000, 203, 2, 'job', 'varchar', 'Engineering Team Lead' UNION ALL
        SELECT 5, 2000, 203, 4, 'start_date', 'datetime', '2018-03-10'

      ) as all_customer_data
  WHERE
    1=1
  GROUP BY 1,2,3,4,5,6,7

dimensions:
  value:
    sql: '"VALUE"'
    hidden: true

  datatype:
    sql: '"DATATYPE"'
    hidden: true

  field_name:
    sql: '"FIELD_NAME"'
    hidden: true

  resource_id:
    sql: '"RESOURCE_ID"'
    hidden: true

  company_id:
    sql: '"COMPANY_ID"'

  user_id:
    sql: '"USER_ID"'

  employee_id:
    sql: '"EMPLOYEE_ID"'

  #These case whens allow the dynamic typing of each field
  string_value:
    sql: |
      CASE 
        WHEN ${datatype} = 'varchar' THEN ${value}
        ELSE NULL
      END
    hidden: true

  numeric_value:
    sql: |
      CASE 
        WHEN ${source_eav.datatype} = 'int' THEN CAST(${value} as INTEGER)
        ELSE NULL
      END
    hidden: true

  date_value:
    sql: |
      CASE 
        WHEN ${source_eav.datatype} = 'datetime' THEN CAST(${value} as DATETIME)
        ELSE NULL
      END
    hidden: true

  test128:
    sql: ${source_eav.numeric_value}
    drill_fields: [ source_eav.numeric_value ]

  test129:
    sql: ${source_eav.numeric_value}
    drill_fields: [ source_eav.numeric_value ]

  test130:
    sql: ${source_eav.numeric_value}
    label: cool
    description: foo
    drill_fields: [ source_eav.numeric_value ]

measures:
  #these measures collapse the sparse matrix and "flatten" the EAV data structure through a max/case when
  pay:
    sql: ${source_eav.numeric_value}
    aggregate_type: max
    filters:
      field_name:
        is: pay

  job:
    sql: ${source_eav.string_value}
    aggregate_type: max
    filters:
      field_name:
        is: job

  name:
    sql: ${source_eav.string_value}
    aggregate_type: max
    filters:
      field_name:
        is: name

  start_date:
    sql: ${source_eav.date_value}
    aggregate_type: max
    filters:
      field_name:
        is: start_date
